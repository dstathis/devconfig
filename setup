#!/bin/bash

function printhelp {
    echo USAGE: setup [k] [--headless]
}

# READ ARGS
while [ ! -z ${1} ]; do
    case ${1} in
        '--headless')
            headless='yes'
            ;;
        '--lxd')
            lxd='yes'
            ;;
        'k')
            skipgit='yes'
            ;;
        *)
            printhelp
            exit 1
    esac
    shift
done

if [ -z ${headless} ]; then
    pkgpattern='s/!//g'
else
    pkgpattern='s/!/#/g'
fi

if [ -z ${skipgit} ]; then
    read -p "Email for git: " gitemail
    read -p "GPG key: " gpgkey
fi

. /etc/os-release

if [ "${ID_LIKE}" == "debian" ]; then
    os=debian
elif [ "${ID}" == "fedora" ]; then
    os=fedora
else
    echo "ERROR: Unknown OS" 1>&2
fi

pkgs=$(cat pkgs-common pkgs-${os} | sed ${pkgpattern} | sed '/#.*\|^$/d')

if [ "${os}" == "fedora" ]; then
    rpm -q ${pkgs} > /dev/null
    if [ $? -ne 0 ]; then
            sudo dnf install -y ${pkgs}
    fi

    # Allow user to use mock
    sudo usermod -a -G mock ${USER}
fi

if [ "${os}" == debian ]; then
    dpkg -V ${pkgs} 1>/dev/null 2>/dev/null
    if [ $? -ne 0 ]; then
        sudo apt install -y -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confnew ${pkgs}
    fi
fi

if [ ! -f "${HOME}/bin/yq" ]; then
    mkdir -p ~/bin
    curl -o ~/bin/yq -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    chmod +x ~/bin/yq
fi

mkdir -p ~/.aliases.d
cp aliases.d/* ~/.aliases.d/
cp aliases ~/.aliases

if [ -z ${skipgit} ]; then
    cp gitconfig ~/.gitconfig
    sed -i "s/{{ email }}/${gitemail}/g" ~/.gitconfig
    sed -i "s/{{ signingkey }}/${gpgkey}/g" ~/.gitconfig
fi

grep -q "\.aliases" ~/.bashrc
if [ $? -ne 0 ]; then
    echo '. ~/.aliases' >> ~/.bashrc
fi
grep -q 'ssh-add' ~/.bashrc
if [ $? -ne 0 ]; then
    echo "sshkeys=\$(\\ls ~/.ssh/id_* | grep -v '\\.pub')" >> ~/.bashrc
    echo 'ssh-add ${sshkeys} 2> /dev/null' >> ~/.bashrc
fi

# Setup vim
if [ ! -f ~/.vim/autoload/plug.vim ]; then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi
mkdir -p ${HOME}/.vim/indent
cp vimrc ${HOME}/.vimrc
cp indent/* ${HOME}/.vim/indent/
mkdir -p ${HOME}/.vim/plugins

# GUI specific stuff
if [ -z ${headless} ]; then
    # Setup tilix
    dconf load /com/gexperts/Tilix/ < tilix.dconf
    sudo update-alternatives --set x-terminal-emulator /usr/bin/tilix.wrapper

    # Setup regolith
    if [ -d ~/.config/regolith2 ]; then
        # Set Xresources
        cp regolith/Xresources ~/.config/regolith3/Xresources
        # Set up bar
        mkdir -p ~/.config/regolith3/i3xrocks/conf.d
        cp regolith/bar/* ~/.config/regolith3/i3xrocks/conf.d/
        # Startup Programs
        mkdir -p ~/bin
        cp regolith/regolith-startup.sh ~/bin/
        # Refresh i3
        regolith-look refresh
    fi
fi

if [ ! -z ${lxd} ]; then
    sudo snap install lxd
    lxd init --auto
    cat ~/.ssh/id_rsa | sed 's/^/        /' > privkey
    cat ~/.ssh/id_rsa.pub | sed 's/^/        /' > pubkey

    awk 'FNR==NR{s=s"\n"$0;next;} /%private_key%/{$0=substr(s,2);} 1' privkey lxd.yaml > profile.temp
    profile=$(awk 'FNR==NR{s=s"\n"$0;next;} /%public_key%/{$0=substr(s,2);} 1' pubkey profile.temp)
    echo "${profile}" > profile.temp
    lxc profile set default user.user-data - < profile.temp
    lxc profile copy default juju
    yq eval-all '. as $item ireduce ({}; . *+ $item)' profile.temp lxd-juju.yaml | lxc profile set juju user.user-data -
    rm profile.temp
    rm privkey
    rm pubkey
fi
